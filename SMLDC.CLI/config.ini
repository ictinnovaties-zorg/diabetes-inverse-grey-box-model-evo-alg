; NOTE: some comments are in Dutch (sorry for that!)
; Settings are (in principle) named exactly the same as the corresponding setting in the .cs code,
; so it should be easy to determine what it does.
; There is a lot of experimental stuff here. We were unable to close the research to our satisfaction within the time
; the project provided. So some dead settings may not have been removed. Some options are obsolete, etc.
; This is really still very much a work in progress.
; 
; Wilco Moerman  (cwj.moerman@windesheim.nl)



[parallel]
; some experimenting with parallel processing. 
; You can run parallel simulations (two or more patients at the same time --> used in BatchRun, see there)
; or you can run a patient, and do all the subpopulations in parallel,
; or you can run a patient, and do all the individual particles in parallel.
; or combine options. UseParallelProcessingOnSubPopulaties = 1, and the rest = 0 gives the highest performance.
; (though that depends a bit on the amount of subpopulations verus the size of those subpopulations)
;
; Setting all to 0 is useful for debugging (and makes some unimportant stuff depending on ordering, deterministic)
;
RunParallelSimulations = 0 ; 0--1 : niet parallel. > 1 wel parallel, en dan max. aantal threads dat tegelijk gebruikt mag worden.  -1: gebruik Environment.ProcessorCount parallel.
UseParallelProcessingOnSubPopulaties = 1;  # snelste als deze wel aan, en ..ParticleEvaluaties niet.  (n.b. als RunParallelSimulations = 1)
UseParallelProcessingParticleEvaluaties = 0  ; # traagst is alleen deze aan hebben en ...OnSubPopulaties niet. (n.b. als RunParallelSimulations = 1)


[patient]
;============ MEETRUIS ========================
GlucoseNoiseFactor =    0.5  ; a factor of 1 means noise that is 'on the edge' of 'according to specs' 
CarbNoiseFactor    =	0	 ; the standard deviation for error in the patient estimation. Factor 1 corresponds to 17 grams (as found in literature)
CarbTimeNoiseSigma =    15   ; [MIN] stddev of the error in the logging of the timing of the meal. 
FoodForgetFactor   =    0.33 ; probability that you forget to log a meal/snack. : 0: log always, never forget anything. 1: always forget to log. 
							 ; [note: forgetting means nothing to be found in log, not even a 0 carbs log. So the ML does not know anything happened]

[simulator]
; set to -1 to let the simulator generate a seed for you.  These values go into the Globals object
SeedForPatientSettings = -1 
SeedForScheduleSettings = -1
SeedForParticleFilter = -1
SeedForParticleFilterSettings = -1

logEveryNEvaluations =  7  ; create some graphs (using Octave, on another thread). NOTE: does not log all the data currently. This value goes into the Globals object
durationInDays = 100
patientAmount = 1


;========================= real patient vs. VIrtual Patient (VIP) ======================================

heartRateGeneratorOption = vip  ; 'vip' (virtual: 'VIrtual Patient') or 'real' (reading real data of patient: realPatientIndex)
; real patient heart rate data file path 
RealDataBaseFolder = C:/Lectoraat/real_patient_data/  ;  See  Utilities/RealPatientDataReader.cs
realPatientIndex = 926 ; the index of the real patient you are interested in. 
 

[glucose_meter]
; the VIP simulates a glucose measurement once every N minutes.
ContinuousGlucoseMmntEveryNMinutes = 15 ;[MIN]





[particlefilter]
ML_PERFECT_HACK = 0  ; set to 1 to 'cheat' and give all the particles the REAL (from the VIP) model parameters. Can be used for debugging, checking parts, etc..

debug = 0  ; create log folder with _DEBUG, instead of a folder with all sorts of settings in the name. See MachineLearning/ParticleFilterDataLogger.cs :: Init()


;=========================================================== ERROR / RMSE ===========================================================
; some experiments with different ways of calculating the errors and using them as the weight (fitness, pressure) in the evolution of the particles (hypothesis)
ErrorCalcInLogSpace = 0;
; 0: rmse (werkt niet goed genoeg), 
; 1: weighted, dus elke 'bin' van rmse (effect van een carb) weegt zelfde in totale rmse (dus korte/lange duur maakt niet uit),
;;;;; 2: geen rmse/smoothed
;;;; 3: smoothed rmse  ( zoals 0)  [werkt niet goed bij g0c0 !!!???? ]
;;;;; 4 smoothed weighted rmse (per bin) ( zoals 1)  --- lijkt niet te werken, extreem rare sprongen, kan de BUG niet vinden in de code. TODO
; 5: 0 + rmse op AFGELEIDE van smoothed!
; 6: 1 + rmse op AFGELEIDE van smoothed!

; kleine test, beste is: ErrorForWeights = 1  met USE_OVERSHOOTS_IN_WEIGHT = 0
ErrorForWeights = 0
SMOOTHING_RANGE = 5  ; oneven [3,5,7,9] ---> wordt een kernel, gaussvormig (ruwweg)
USE_OVERSHOOTS_IN_WEIGHT = 0 ; gebaseerd op smoothed noisy error. Onderstaande wegingen NIET te hoog maken!!! Kleine factoren lijken te werken. WERKT NIET BIJ ACT + C noise! grote jumps
GLUC_THRESHOLD_FOR_UNDERSHOOT = 200  ; alleen pieken/dalen onder deze threshold tellen mee voor over/undershoots
; wegingen. De ErrorForWeights heeft weging 1.
noisyLowerThanPredictedAtMaximumFactor  = 0.25  ; ML te hoog op piek
noisyHigherThanPredictedAtMaximumFactor = 0.25  ; ML te laag op piek
noisyLowerThanPredictedAtMinimumFactor  = 1.0 ; ML te hoog op dal   --> gevaarlijk: je denkt dat alles ok is
noisyHigherThanPredictedAtMinimumFactor = 1.0 ; ML te laag op dal  --> te bezorgd


; when insulin advice is requested, we can lock the Machine Learnign predictions on the current (smoothed) values
; for the observed glucose. If we do this, the glucose curve of the ML is 'locked' or reset to the latest known measured value (well, a local average)
; if we don't do this, the ML will just evaluate the whole trail based only on the starting value for the glucose.
; NOTE: we only measure glucose, so we can only lock the glucose part of the ML calculation. But the ML uses more internal values
; (all the Bergman/Breton internal results, like X, I, D, Z) and those cannot be locked to the most current known values, because
; we will never know these for a real patient. So locking is at best a partial solution.

LockPredictionsOnMmnts =  1; // 0: no locking. 1: locking
; An interval after each insulin bolus [start,end] where we want the error for. This would correspond with the interesing time
; a few hours after a bolus. We are not interested in if the ML can predict further in the future (though: if it can predict accurately 
; further in the future, this gives more confidence to its quality).
LockPredictionsOnMmnts_Start_TimeWindow_in_min = 120; 
LockPredictionsOnMmnts_End_TimeWindow_in_min = 240; 

;================== bound for ICR and ISF (particle outside of bounds --> 'stagnation' + termination) ======================================
; if a ML hypothesis generates ICR or ISF outside of these (very relaxed)bounds, it is not a viable hypothesis, and can be terminated.
ICR_lower_bound = 0.01;
ICR_upper_bound = 1000;

ISF_lower_bound = 0.01;
ISF_upper_bound = 1000;



;=============================================================== trails =============================================================
evaluateEveryNMinutes = 300  ; om de zoveel minuten wordt opnieuw de trail bepaald en de ML 1 iteratie getraind


; evaluatie over hoeveel tijd: probeer trail long ~ 10000 te houden (= TrailLengthInMinutes * NrXTrailForLong)
TrailForEvaluationInMinutes = 10000 ;10k is bijna 7 dagen.

TrailLengthInMinutes = 20000;    30k ; 10k is bijna 7 dagen.
TrainTrailFase1Fraction = 0.5  ; gebruik dit deel om particles te trainen, gebruik het restant om de subpop besten te evalueren en er eentje uit te kiezen (tegen overfitting)
TrainTrailSkipFirstFraction = 0.1  ; sla deze fractie v/d trail over als het gaat om de PF. (Kan wel gebruikt worden voor carb estimates)

;====================================================== SUB POPULATIES ============================================================


; populatie 
NumberOfSubPopulations = 25;  ; UseParabolicSearchInSubPopulationOncePer = -1 --> dan evenveel particles per sub als er param zijn!
NumberOfParticlesPerSubPopulation = 20;
MaximumHistoryQueueLength = 30;  history v/d high level pf.

; subpopulaties
MaxNrSubPopulatiesNotExploring = 3		; 1 --> alles mag exploreren behalve 1
NumberOfParticlesFromHistory = 2		; in subpop stoppen vanuit best hist van subpop
NumberOfParticlesToKeep = 2
MaximumSubHistoryQueueLength = 50


;=================================================== stagnation ==========================================================
; once errors remain the same for some time, 'stagnation' is detected, and after a while the entire subpopulation is terminated.
; this is done to use the precious CPU time for more promising hypothesis and not spend too much time on hypotheses that don't 
; get better (the best subpopulation is excluded)
MaxStagnationCounter = 5;  
SlopeForStagnation = -0.1;
SlopeForNewSeed = -0.1;
RangeForSlope = 5
ProbabilityOfSamplingFromBestHistoryToNewSubpopulation = 0.1 ; elke keer als stagnatie is, dan met deze kans de (op dat moment) beste uit history halen en als seed gebruiken (ipv exploratie)


; some settings for using a hash-like structure (based on spatial partitioning idea) to force exploration of solutions to new unexplored parts.
; Particle filters, evolutionary algorithms, etc. fall victim to convergence near local optima.
; This system divides the parameter space in bins (currently the same division on each dimension; TODO: different nr bins for each parameter!)
; If a subpopulation is terminated, this hash/spatial partitioning is used to quickly find an area in parameterspace that is not explored yet.
; (See NearestParticleHashing code)
nearestParticleHashing_FactorUseAfterTime = 0.9 ; factor * (evaluatie + traintrail)77
nearestParticleHashing_nr_bins_per_dimension = 8;  ; <= 0 --> disabled
nearestParticleHashing_useForStagnationDetection = 1;   ; 0: only used for exploring new unexplored area.  1: if a subpopulation enters an already explored arey (by other subp) is77 it terminated

nearestParticleHashing_initTerugtelWaarde = 150; ; only used for ascii representation of hash when printing.




; ============================================= SEARCH /SUB POP VARIATIES ========================================================
SearchInSubPopulationType =  1
				;  0: no 'local' search in subpopulations, so the particles will be evaluated on the whole of the available trail, and only once.
				;  1: when a subpopulation trains, it will divide the available train trail in short pieces, train on that, move to next piece, train, etc... (possiblly repeating this from the beginning several times, dending on settings)
UseParabolicSearchInSubPopulationOncePer = 2
UseParabolicSearchInSubPopulatioNrParabolicSteps = 5;

; local search sub sub:
NumberOfSubParticlesFromHistory = 1;

NumberOfPeaksPerSubSubPopulation = 3
NumberOfPeaksPerSubSubPopulationStep = 2
NumberOfRepeatsPerSubSubPopulation = 1 ;MOET 1 zijn, obsolete // buitenste for loop. Hoeveel keer opnieuw bij eerste piek beginnen. ;; zelfde effect (bijna) ook te behalen door evaluateEveryNMinutes korter te maken, en dat geeft meer nieuwe info!
NumberOfTurnsPerSubSubPopulation = 5; binnenste for loop, op 1 stuk van pieken herhalen
RmseForBreak = 15;

UpdateBestAfterEachSubsubTraining = 1;  
SubRepeatedSearch_gebruikBesteVanElkeSubSub = 1  ; 1: beste v/ elke subsub verzamelen en dat is nieuwe subpopulatie. 0: subsub particles na laatste piek worden sub particles



; ========================================== SELECTION PRESSURE for hypothesis RESAMPLING ==========================================================
; I've implemented a variation of boltzmann selection, where higher fitness (weight) has higher probability of getting
; selected (idea based on boltzmann selection in reinforcement learning.)
; (See code for details)
;
; boltzmann 'pressure':  pow = 1 + initialHeight * Math.Exp(-decay_factor * sse)
; en de pow wordt gebruikt om gewichten (herschaald naar 0--1 range) uit te vergroten/verkleinen
ExponentialDecayInitValue = 0.3   ; rond 0.3 is ok.  //  maar init=1 en dan decay=0.01 werkt ook?
ExponentialDecayDecayValue = 1  ; 0.1 -- 0.3

FractionWhenChangeParam = 1
GammaMomentum = 0
FractionMomentum = 0





;======================================================= CARB estimates =============================================================
; the carb estimation algorithm can either keep an esimation for each subpop separately, or it uses one and the same for each subpop.
UseSearchPerSub = 1  ; 1: tijdens trail heeft elke subpop z'n eigen estimate. Avg wordt gebruikt als een estimate gevraagd wordt. 0: er is maar 1 estimate
; the carb estimation algorithm can always return the average estimation (even when UseSearchPerSub=1) or it can give the estimate 
; specifically for the requested subpop (which would still be the same estimate for all, if UseSearchPerSub=0)
GetCarbEstimatesPerSub = 0 ; 0: return altijd avg. waarde als (ook in sub) gevraagd wordt om estimate. 1: return voor subpolicies de estimate die specifiek bij die sub hoort.

; start = 1 is helemaal aan begin. End idem. Gerekend v/a einde.
NrXTrailForCarbSlopeEnd = 0.2
NrXTrailForCarbSlopeStart = 0.5
local_search_learning_rate_base = 1 ; hoger is: carb hyp. meer opschuiven naar parabolic search antwoord (analoog aan lr van NN)
local_search_learning_rate_power = 0.1     ; 0 --> fractie altijd 1. Hoe hoger, hoe meer het recente verleden zwaarder telt (en het verre verleden amper meer carb est kan wijzigen)


PowForLobsidedness = 0.44	; 
PowForLobsidednessPerCarbHyp = 2;  // 1--> gewoon gemiddelde van alle diffs
SchalingPow = 2;
CarbEstimatesPerSubUpdateIsLearningRate = 0.25;    // < 0: avg over wat er huidig aanwezig is,  0: avg. over alles (met wegingsfactor);  > 0: MAX learningrate (= opchuiven met wegingsfactor * lr naar nieuwe waarde)

CarbSearchLinear =  1 ; 0 = 'parabolic' ;  1 = linear 
MaxNrStepsInParabolicSearch = 10

UpdateCarbHypDuringSearch = 0  ; eerst maakte dit verschil (door nondet. parallel?), nu niet meer. 0 is sneller (omdat dan het zoeken parallel kan)


VerwijderCarbHypsDichterBijDanMarge = 15 ; minuten. Als de reftijd +  aggregate offset dichterbij elkaar zitten dan deze waarde, dan wordt 1 v/d 2 verwijderd
VoegCarbHypToeAlsVerderwegDanMarg = 120 ; // als niet uit schedule, dan moet nieuwe carbhyp gebaseerd op gluc curve minimaaal zover weg van andere zijn.
SMOOTHING_RANGE_FOR_FORGET_DETECTION = 7; 



; settings for detecting a (possible) carb event (eating) based on slope changes in measured glucose:
MargingProd2x3 = -0.0003  
MarginSlope2 = 0.025 

EvaluateSubCarbhypOncePerN = 2

; experiment with using a detected 'lobsidedness' in carbhyps, to change the G base level.
; is many more carbhyps are above the patient specified carbhyp then below (or vice versa), this could be an indication that the G base level 
; should be adjusted.  Didn't seem to work though...
UseLobsidednessSignalFromCarbHypInResample = 0  ; 0: niks;   1: gebruik 'signaal' van lobsidedness uit carbhyp om particle G_base aan te passen naar juiste kant.
CarbHypRanking = 1;  ; 0: geen ranking, maar ruwe weging [WERKT NIET],  1: ranking van weging.

BaseInitialCarbEstimationOnGlucoseCurve = 1

; some params determining when ML can add another carb event, or when it should merge it with one close by.
MAX_CARB_OFFSET_BASED_ON_PATIENT_ESTIMATE_in_min = 15;
MAX_CARB_ESTIMATE_in_gr = 250;
MAX_AFWIJKING_VAN_PATIENT_ESTIMATE_in_gr = 10;



MLUseBretonActivityModel = 1


[particlefilter-model-ranges]
Gb_in_MG_per_DL =  90      ~    175
Vi_in_L =          7       ~     16
Vb_in_L =          3.5     ~    6.5
DRate =            0.01    ~    0.1
Carb2Gluc =        0.05    ~     2 
P1 =               1e-6    ~    0.1
P2 =               1e-6    ~    0.1 
P3 =               1e-9    ~    1e-4 
P4 =               1e-5    ~    1e-2

;=== bretonsmodificationsmodel parameters ===
RestingHeartRate = 30     ~     100
TauZ =             500    ~    5000
TauGamma =         1      ~     100
GammaFaFactor =    1      ~       7
GammaFnPower =     2      ~      10
Alpha =            0.01   ~       2
Beta =             1e-6   ~    1e-3






[proxy-for-real-patient-model]
; ============================= VIP ==============================
; ================= bergman etc model parameters =================

UseBretonActivityModel = 1


Gb_in_MG_per_DL = 150::10 
Vi_in_L = 9::2 
Vb_in_L = 5::1
DRate = 0.015::0.003 

Carb2Gluc = 0.35::0 ;   conversion factor from  carb to carbs in bloed  // is not included in Bergman model.

; See any paper on Bergman model for meaning of p1...p4.
; Below are some observations on changing p values and their effect on the shape of glucose curves.
;
; p1: snelheid van Glucose afname (naar Gb), onafhankelijk van insuline
; p2: Snelheid waarmee actieve insuline (X) verdwijnt ( p2 omhoog, ICR & ISF omlaag). 
;     p2 Heeft vooral effect op hoeveelheid ins. nodig, maar amper op vorm/hoogte v/d curve. Hoger = meer ins. nodig voor zelfde effect 
;     omdat X dan sneller verdwijnt.
; p3: mate waarin I de X beinvloedt (p3 omhoog, ICR & ISF omhoog)
; p4: Afbraaksnelheid van insuline in het bloed (p4 omhoog, ICR & ISF omlaag)
;     p3 laag && p4 laag --> tragere afbraak, bredere carb pieken.
;     p3 hoog && p4 laag --> heel weinig ins. nodig.
;     p3 laag && p4 hoog --> extreem veel ins. nodig, en gluc. pieken helemaal plat geworden.
;     verhouding p4/p3 bepaalt hoeveelheid insuline (~1000 --> ongeveer 10 IU per bolus,  ~100 ==> ong. 1 IU per bolus, maar verhouding wisselt)



;; opties die redelijk goede curves geven.


P1 = 0.001::0.0005  
P2 = 0.03::0.007
P3 = 0.0000001::0.00000002
P4 = 0.005::0.001



; Rutln from the Bergman model is not implemented
; Ib_in_MIU_per_L =  0::0  ; unused, since it would be zero for type 1 -- todo: could use for type 2?


;=============== Breton activity model parameters ==========

RestingHeartRate = 70::13
TauZ = 2000::500
TauGamma = 11::2
GammaFaFactor = 2.5::0.35 ;  if this goes down, Z goes up. 2 seems to be about as low as reasonable. 
GammaFnPower = 6::0.5  ; if this goes up, Z will be lower and less bumpy. When lower than about 4, Z will always be very high
Alpha = 0.7::0.1
Beta = 0.00010::0.00002





; ====================== SCHEDULE ==============================

; Note the different units for time and duration!
; time [hour]
; duration [MIN]  //currently not used, but could be used in the future for spreading carbs over some time (simulating the time that the meal takes)
; carb  [gr]
; skip_percentage // probability of skipping this meal/snack
; insulin_offset [MIN] // insulin is taken this amount of time before the meal.
; insulin_skip_percentage  // probability of skipping insulin (given there will actually be a meal. The VIP does not do insulin without a meal)

[eatevent-breakfast]
time = 8::1
duration = 30::0
value = 30::10
skip_percentage = 10
insulin_offset = 15::0
insulin_skip_percentage = 20

[eatevent-morningsnack]
time = 10.5::1.5
duration = 10::0
value = 15::5
skip_percentage = 35
insulin_offset = 10::0
insulin_skip_percentage = 50

[eatevent-lunch]
time = 12.5::1
duration = 30::0
value = 50::20
skip_percentage = 10
insulin_offset = 15::0
insulin_skip_percentage = 10

[eatevent-afternoonsnack]
time = 15.5::1
duration = 5::0
value = 15::5
skip_percentage = 35
insulin_offset = 5::0
insulin_skip_percentage = 40

[eatevent-dinner]
time = 18::1.5
duration = 60::0
value = 75::35
skip_percentage = 0
insulin_offset = 15::0
insulin_skip_percentage = 0 ; We never forget insulin when eating diner!

[eatevent-eveningsnack]
time = 21::1.5
duration = 30::0
value = 10::5
skip_percentage = 35
insulin_offset = 15::0
insulin_skip_percentage = 60


; ======================== heartrate FSM parameters ======================
; some params for controling the behaviour of the FSM that produces the heart rates.
; the basic structure is a FSM with states that have a probability of transiting to other states.
; Some points are 'fixed', since you cannot run or sleep and eat at the same time, etc..
; so the FSM uses the meal schedule to determine opportunities for 'sleep', and it also
; uses the eat events: when the eating time is near, the probability to go to the sitting state increases.
; There are also some limits on how many times you can do a high intensity action (like running) per day.
; Some of the parameters are still hardcoded in the states (those are to prevent hystersis, e.g. someone 
; going from going to RUN ,and then after one minute switching back to WALK, going to RUN again after a minute, etc...) 
;
; Sorry, most of the names and comments are still in Dutch :-(
; slapen = sleep, zitten = sitting, eten = eat, lopen = walking, fietsen = cyclin, hardlopen = running,  traplopen = going up/down stairs, extreem = extreme sports (like sprinting)


[heartrate_fsm]
; hr base comes from bergman model settings

; levels: factor times base heartrate
factorSlapen = 0.9::0.05 
factorZitten = 1.12::0.07
factorEten = 1.3::0.1
factorStaan = 1.5::0.1
factorLopen = 1.75::0.15
factorFietsen = 1.9::0.1
factorHardlopen = 2.7::0.3 
factorTraplopen = 2.7::0.1
factorExtreem = 3.1::0.15

; de kansen om uit een state weg te gaan, zijn nog hardcoded.
maxAantalKeerSportPerDag = 2::0.3
maxAantalKeerExtreemPerHardlopen = 2::1
maxDuurExtreemSport = 40::10
maxDuurFietsen = 120::60
maxDuurHardlopen = 60::20
minTijdTussenSporten = 120::30

maxDuurWandelen = 120::60
maxTijdTotWakker = 240::60  ; aaneengesloten stukken slaap, onderbroken door zitten/lopen (naar de wc :-)
maxTijdVanZittenNaarSlapen = 120::30  ; als je kan gaan slapen, hoe lang duurt het dan in State_ZITTEN totdat je gaat slapen
maxTijdVanZittenNaarSlapenAlsJeMoetGaanSlapen = 40::10
maxTijdVanStaanNaarSlapenAlsJeMoetGaanSlapen = 10::5

; ruwweg de belangrijkste state transities:
kasnOpZitten = 0.2::0.1 ; kans om vanuit staan naar zitten te gaan, en vanuit lopen naar staan of zitten te gaan.
kansOpLopen = 0.1::0.05  ; kans (elke mninuut opnieuw) om vanuit zitten naar lopen te gaan.
kansOpSporten = 0.3::0.1 ; kans (in lopen/zitten) om te gaan sporten
kansOpFietsenVsHardlopen = 0.6::0.1 ; verdeling/kans tussen fietsen vs. hardlopen (ALS sporten gekozen wordt, dan is er deze kans dat het fietsen wordt, en anders wordt het hardlopn)
